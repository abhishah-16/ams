{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "API Documentation for AMS system",
        "description": "List of all APIs for management resources like auditorium, tickets, booking etc..",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "basePath": "/",
    "tags": [
        {
            "name": "Users",
            "description": "APIs to handle general task like Login, Signup, Profile, Logout"
        },
        {
            "name": "Admin",
            "description": "APIs for Admin management in AMS"
        },
        {
            "name": "Customer",
            "description": "APIs for Customer management in AMS"
        }
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "paths": {
        "/users/login": {
            "post": {
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter valid details to login user",
                        "schema": {
                            "type": "object",
                            "required": [
                                "email",
                                "password"
                            ],
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "login for all users",
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "Error while logging into system."
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter user's all details for signup",
                        "schema": {
                            "type": "object",
                            "required": [
                                "email",
                                "password",
                                "role",
                                "age",
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "age": {
                                    "type": "integer"
                                },
                                "role": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Signup for all users excepts manager",
                "responses": {
                    "201": {
                        "description": "User has been created into system."
                    },
                    "400": {
                        "description": "Error while creating user."
                    }
                }
            }
        },
        "/users/me/update": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter user's all details for signup",
                        "schema": {
                            "type": "object",
                            "required": [
                                "email",
                                "password",
                                "role",
                                "age",
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "age": {
                                    "type": "integer"
                                },
                                "role": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Signup for all users excepts manager",
                "responses": {
                    "201": {
                        "description": "User has been created into system."
                    },
                    "400": {
                        "description": "Error while creating user."
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get the personal(looged user's) details.",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "User not authenticated."
                    }
                }
            }
        },
        "/admin/adminDashboard": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get the accsess of Admin Dashboard",
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    }
                }
            }
        },
        "/admin/managerList": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "description": "Can query for particular manager with verification status like [Pending, True, Flase] verification"
                    }
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get the all manager list",
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    }
                }
            }
        },
        "/admin/setManagerStatus": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter 'manager id' and 'verification status of manager', whom you want to change verification status form the below options\n => [ True , False ]",
                        "schema": {
                            "type": "object",
                            "required": [
                                "manager_id",
                                "verificationStatus"
                            ],
                            "properties": {
                                "manager_id": {
                                    "type": "string"
                                },
                                "verificationStatus": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get the all manager list",
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    }
                }
            }
        },
        "/customer/allEvents": {
            "get": {
                "parameters": [
                    {
                        "name": "city",
                        "in": "query",
                        "type": "string",
                        "description": "Enter 'manager id' and 'verification status of manager', whom you want to change verification status form the below options\n => [ True , False ]"
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "type": "string",
                        "description": "Enter 'manager id' and 'verification status of manager', whom you want to change verification status form the below options\n => [ True , False ]"
                    }
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get the all events list for customer",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    }
                }
            }
        },
        "/customer/ticketBooking": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "API for book event tickets",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter event_id that customer want to book tickets and also give seats numbers for booking",
                        "schema": {
                            "type": "object",
                            "required": [
                                "event_id",
                                "seat_numbers"
                            ],
                            "properties": {
                                "event_id": {
                                    "type": "string"
                                },
                                "seat_numbers": {
                                    "type": "array"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    },
                    "404": {
                        "description": "Can't find searched resource"
                    }
                }
            }
        },
        "/customer/ticket/transactionUpdate": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "API for make payment to confirm book tickets",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Enter transaction id and event id to complete tickets booking",
                        "schema": {
                            "type": "object",
                            "required": [
                                "event_id",
                                "cTrans_id"
                            ],
                            "properties": {
                                "event_id": {
                                    "type": "string"
                                },
                                "cTrans_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Please authenticate befor sending request"
                    },
                    "400": {
                        "description": "Unauthenticated person to view this details"
                    },
                    "404": {
                        "description": "Can't find searched resource"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "required": [
                "_id",
                "name",
                "email",
                "age",
                "role",
                "verificationStatus",
                "password",
                "tokens"
            ],
            "properties": {
                "_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "age": {
                    "type": "number"
                },
                "role": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "Auditorium": {
            "required": [
                "_id",
                "auditoriumName",
                "address",
                "city",
                "capacity",
                "costPerHour",
                "manager_id"
            ],
            "properties": {
                "_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "auditoriumName": {
                    "type": "string"
                },
                "address": {
                    "type": "string",
                    "uniqueItems": true
                },
                "city": {
                    "type": "string"
                },
                "capacity": {
                    "type": "number"
                },
                "costPerHour": {
                    "type": "number"
                },
                "manager_id": {
                    "type": "string"
                }
            }
        }
    }
}